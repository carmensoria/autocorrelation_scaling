---
title: "09_analyses_sac_occ"
format: html
editor: visual
---

# Joint change of SAC and OCC (all BBAs)

-   Calculating log ratios of changes in the observed Join count statistic, the expected Join count statistic and species occupancy.

-   Classifying combined log ratio of the Join count statistic and occupancy, using the linear regression of the log ratio of expected join count as a function of the log ratio of occupancy:

    -   Q1: temporal decrease in both and the observed join count is higher than expected for that change in occupancy.

    -   Q2: temporal decrease in occupancy and increase in observed join count

    -   Q3: temporal increase in both and the observed join count is higher than expected for that change in occupancy.

    -   Q4: temporal increase in both and the observed join count is lower than expected for that change in occupancy.

    -   Q5: temporal increase in occupancy and decrease in observed join count

    -   Q6: temporal decrease in both and the observed join count is lower than expected for that change in occupancy.

    -   Equal: temporal change in sac equal to the expected for that change in occupancy

    -   No change: no temporal change in both occupancy and occupancy

    -   Positive infinite: from zero to at least one join

    -   Negative infinite: from at least one join to zero joins

    -   Change in SAC with no change in OCC: moving along the y axis

    -   Change in OCC independent of change in SAC: moving along the x axis

-   For each area: plotting log ratio of the join count statistic against the log ratio of occupancy, marking and coloring the quadrants and assigning a point size based on grain size.

-   For each area: bar plots of the proportion of species that fall in each quadrant for each grain size .

### Libraries

```{r}
#| label: libraries
#| message: false
#| warning: false

pacman::p_load(tidyverse, sf, viridis, gridExtra, grid, cowplot, here)
```

### Directories

```{r}
#| label: directory-variables
#| message: false
#| warning: false

# File with paths
source(file.path(here(), "codes", "00_config_file.R"))
```

### Variables

```{r}
#| label: variables
#| message: false
#| warning: false

# Quadrant colours
quadrant_col <- c("Q1" = "#FEE090","Q2" = "#FC8D59", "Q3" = "#D73027", 
                  "Q4" = "#87cfc7", "Q5" = "#2e78a0", "Q6" = "#09177e",
                  "No change" = "#4A4A4A", 
                  "Pos. Infinite" = "#8A5AC7", "Neg. Infinite" = "#C8A5F0",
                  "Change JC" = "#F0C24E", "Change OCC" = "#B28300",
                  "Equal" = "#ff499e")



## Atlas region labels for GridExtra plots
aos_labels <- list(
  textGrob("Czechia", gp = gpar(fontsize = 11, fontface = "bold")),
  textGrob("Europe", gp = gpar(fontsize = 11, fontface = "bold")),
  textGrob("New York", gp = gpar(fontsize = 11, fontface = "bold")),
  textGrob("Japan", gp = gpar(fontsize = 11, fontface = "bold"))
)
```

### Load data

```{r}
#| label: load-data
#| message: false
#| warning: false


# Species
data_species <- read.csv(file.path(paths$output_path, "sac_species_table.csv")) %>%
  dplyr::select(-X) %>% 
  mutate(
    datasetID = factor(datasetID, 
                       levels = c("Czechia", "Europe", "New York", "Japan")),
    cellSide = case_when(
      datasetID == "Czechia" ~ scalingID * 11, # Cell side = 11 km
      datasetID == "Europe" ~ scalingID * 50, # Cell side = 50 km
      datasetID == "New York" ~ scalingID * 5, # Cell side = 5 km
      datasetID == "Japan" ~ scalingID * 20, # Cell side = 50 km
      )
    )


# Dataset IDs
datasetIDs <- unique(data_species$datasetID)
```

### Log ratios and quadrant assignment

-   Function to calculate log ratios for each datasetID

```{r}
#| label: function-logratios
#| message: false
#| warning: false


# Function to calculate log ratios for each dataset ID
calc.logratios <- function(dataset_name, data = data_species) {
  change_sac_occ_df <- data %>%
    filter(datasetID == dataset_name & !is.na(jcStatistic)) %>% 
    group_by(datasetID, scalingID, scientificName) %>%
    mutate(nPeriods = n()) %>% 
    ungroup() %>% 
    filter(nPeriods >= 2) %>% 
    group_by(scientificName, scalingID, cellSide) %>% 
    mutate(firstPeriod = min(samplingPeriodID),
           lastPeriod = max(samplingPeriodID)) %>% 
    summarise(
      datasetID = unique(datasetID),
      firstJCStat = jcStatistic[samplingPeriodID == firstPeriod],
      lastJCStat = jcStatistic[samplingPeriodID == lastPeriod],
      logratioJCStat = log(lastJCStat / firstJCStat),
      firstJCExp = jcExpectation[samplingPeriodID == firstPeriod],
      lastJCExp = jcExpectation[samplingPeriodID == lastPeriod],
      logratioJCExp = log(lastJCExp / firstJCExp),
      firstOcc = occCells[samplingPeriodID == firstPeriod],
      lastOcc = occCells[samplingPeriodID == lastPeriod],
      logratioOcc = log(lastOcc / firstOcc),
      nPeriods = nPeriods,
      .groups = "drop"
    ) %>% 
    mutate(quadrant = case_when(
      firstJCStat == lastJCStat & firstOcc == lastOcc ~ "No change",
      firstJCStat == 0 & lastJCStat != 0 ~ "Pos. Infinite",
      firstJCStat != 0 & lastJCStat == 0 ~ "Neg. Infinite",
      firstJCStat == lastJCStat & firstOcc != lastOcc ~ "Change OCC",
      firstJCStat != lastJCStat & firstOcc == lastOcc ~ "Change JC",
      logratioJCStat == logratioJCExp ~ "Equal",
      logratioJCStat < 0 & logratioOcc < 0 & logratioJCStat > logratioJCExp ~ "Q1",
      logratioJCStat > 0 & logratioOcc < 0 ~ "Q2",  
      logratioJCStat > 0 & logratioOcc > 0 & logratioJCStat > logratioJCExp ~ "Q3",
      logratioJCStat > 0 & logratioOcc > 0 & logratioJCStat < logratioJCExp ~ "Q4",
      logratioJCStat < 0 & logratioOcc > 0 ~ "Q5",  
      logratioJCStat < 0 & logratioOcc < 0 & logratioJCStat < logratioJCExp ~ "Q6"
      
    )) %>% 
    unique() # Remove duplicate rows which are repeated years
  
  return(change_sac_occ_df)
}
```

-   Calculating log ratios

```{r}
#| label: calculating-logratios
#| message: false
#| warning: false


# List of tables with all logratios
occ_change_df_list <- purrr::map(datasetIDs, calc.logratios)
occ_change_df_list <- setNames(occ_change_df_list, datasetIDs)


# Unique log ratio table
jcocc_data_df <- bind_rows(occ_change_df_list) %>% 
  select(datasetID, scalingID, cellSide, scientificName, 
         firstJCStat, lastJCStat, logratioJCStat, 
         firstJCExp, lastJCExp, logratioJCExp, 
         firstOcc, lastOcc, logratioOcc, nPeriods, quadrant)

# Removing list
rm(occ_change_df_list)
```

-   Summary of percentage of species increasing SAC and Occ

```{r}
#| label: summary-logratios
#| message: false
#| warning: false

# Summary across grain sizes
jcocc_summary_df <- jcocc_data_df %>% 
  filter(is.finite(logratioJCStat)) %>%
  group_by(datasetID, cellSide) %>% 
  summarise(meanLogratioOcc = mean(logratioOcc),
            median_logratio_occ = median(logratioOcc),
            increasing_occ_perc = sum(logratioOcc > 0) / n_distinct(scientificName) * 100,
            decreasing_occ_perc = sum(logratioOcc < 0)/ n_distinct(scientificName) * 100,
            mean_logratio_jcstat = mean(logratioJCStat),
            median_logratio_jcstat = median(logratioJCStat),
            increasing_jcstat_perc = sum(logratioJCStat > 0) / n_distinct(scientificName) * 100,
            decreasing_jcstat_perc = sum(logratioJCStat < 0)/ n_distinct(scientificName) * 100,
            .groups = "drop"
            )
```

-   Save tables

```{r}
#| label: save-logratios
#| message: false
#| warning: false

# Saving
write.csv(jcocc_data_df, file.path(paths$output_path, "logratio_jcocc.csv"))
write.csv(jcocc_summary_df, file.path(paths$output_path, "summary_logratio_jcocc.csv"))

rm(jcocc_summary_df)
```

### Linear models

Linear models of logratioJCStat \~ logratioOcc and logratioJCExp \~ logratioJCExp. Calculating the lm of the logratioJCExp just to ensure that the changes in occupancy are behind changes in the expected logratio (i.e., R-squared of \~1).

-   Function

```{r}
#| label: function-lm-sacocc
#| message: false
#| warning: false


# Function to fit linear models for each dataset ID
fit.lm <- function(dataset_name, data = jcocc_data_df) {
  
  # Filtering logratio data by dataset
  data_lm <- data %>% 
    filter(datasetID == dataset_name)

  
  # Fit linear models grouped by cell side (grain size)
  result_lm <- data_lm %>% 
    group_by(cellSide) %>%
    do({
      # Filter out infinite values of log ratios
      noinf_jcstat <- filter(., is.finite(logratioJCStat))
      noinf_jcexp <- filter(., is.finite(logratioJCExp))
      
      # Fitting models
      lm_jcstat <- lm(logratioJCStat ~ logratioOcc, data = noinf_jcstat)
      lm_jcexp <- lm(logratioJCExp ~ logratioOcc, data = noinf_jcexp)
      
      # Extract summary statistics for each grain size
      data.frame(
        datasetID = unique(.$datasetID),
        cellSide = unique(.$cellSide),
        
        # For observed Join Count (jcstat)
        RsquaredJCStat = summary(lm_jcstat)$r.squared,
        PValJCStat = summary(lm_jcstat)$coefficients[2, 4], 
        SlopeJCStat = summary(lm_jcstat)$coefficients[2, 1], 
        InterceptJCStat = summary(lm_jcstat)$coefficients[1, 1], 

        # For expected Join Count (jcexp)
        RsquaredJCExp = summary(lm_jcexp)$r.squared,
        PValJCExp = summary(lm_jcexp)$coefficients[2, 4], 
        SlopeJCExp = summary(lm_jcexp)$coefficients[2, 1], 
        InterceptJCExp = summary(lm_jcexp)$coefficients[1, 1] 
      )
    })
  
  return(result_lm)
}
```

-   Calculating linear models

```{r}
#| label: calculating-lm
#| message: false
#| warning: false

# Use map to apply the function to each dataset ID
lm_list <- purrr::map(datasetIDs, fit.lm)
lm_list <- setNames(lm_list, datasetIDs)

# All in one table
lm_df <- bind_rows(lm_list)

# Removing the list
rm(lm_list)
```

-   Saving

```{r}
#| label: save-lm
#| message: false
#| warning: false

# Saving
write.csv(lm_df, file.path(paths$output_path, "summary_lm_jcocc.csv"))
```

### Number and proportion of species per quadrant

-   Calculating

```{r}
#| label: species-logratio-quadrant-number
#| message: false
#| warning: false

# Number of species per dataset and grain size
distinct_sp_df <- jcocc_data_df %>% 
  group_by(datasetID, cellSide, scalingID) %>% 
  summarise(totalSp = n_distinct(scientificName), .groups = "drop")

# Number of species in each logratio quadrant
quadrant_counts_df <- jcocc_data_df %>% 
  group_by(datasetID, cellSide, scalingID, quadrant) %>% 
  summarise(countQ = n(), .groups = "drop") %>% 
  left_join(distinct_sp_df) %>% 
  mutate(percentageSp = (countQ / totalSp) * 100,
         quadrant = factor(quadrant, levels = c(
           "Q1", "Q2", "Q3", "Q4", "Q5", "Q6", 
           "No change", "Change OCC", "Change JC",
           "Pos. Infinite", "Neg. Infinite", "Equal"))) %>% 
  mutate(quadrantGroup = case_when(
    quadrant %in% c("Q1", "Q2", "Q3") ~ "Overaggregation",
    quadrant %in% c("Q4", "Q5", "Q6") ~ "Overdispersion",
    quadrant %in% c("Pos. Infinite", "Neg. Infinite") ~ "Infinite",
    quadrant %in% c("Change JC", "Change OCC") ~ "Independent",
    TRUE ~ quadrant
    )) %>%
  mutate(quadrantGroup = factor(quadrantGroup, levels = c(
    "Overaggregation",
    "Overdispersion",
    "Independent",
    "Infinite",
    "No change",
    "Equal"
    )))


# Grouping Q2 and Q3 (increase in both) and Q5 and Q6 (decrease in both)
quadrant_counts_group_df <- quadrant_counts_df %>% 
  mutate(quadrantSum = case_when(
    quadrant %in% c("Q3", "Q4") ~ "Inc. both",
    quadrant %in% c("Q6", "Q1") ~ "Dec. both",
    TRUE ~ quadrant
  )) %>% 
  group_by(datasetID, cellSide, quadrantSum) %>% 
  summarise(
    count = sum(countQ),
    totalSp = unique(totalSp),
    percentageSp = sum(percentageSp),
    .groups = "drop"
  )

```

-   Check: percentage sum per datasetID and scaling

```{r}
#| label: species-logratio-quadrant-checks
#| message: false
#| warning: false

# Is the sum 100%?
quadrant_counts_df %>% 
  group_by(datasetID, cellSide) %>% 
  summarise(sumperc = round(sum(percentageSp),3), .groups = "drop") %>% 
  select(-datasetID, -cellSide) %>% 
  unique() %>% 
  pull() # Yes!

# Is the sum 100%?
quadrant_counts_group_df %>% 
  group_by(datasetID, cellSide) %>% 
  summarise(sumperc = round(sum(percentageSp),3), .groups = "drop") %>% 
  select(-datasetID, -cellSide) %>% 
  unique() %>% 
  pull() # Yes!
```

-   Saving

```{r}
#| label: species-logratio-quadrant-save
#| message: false
#| warning: false


# Summary of the counts (n of species) per quadrant
write.csv(quadrant_counts_df, file.path(paths$output_path, "quadrant_jcocc.csv"))

# Summary of the counts (n of species) per quadrant summing Q3 and Q4 and Q6 and Q1
write.csv(quadrant_counts_group_df, file.path(paths$output_path, "quadrant_jcocc_grouped.csv"))
```

### Scatterplots logratio SAC against logratio OCC

-   Function to create scatterplot

```{r}
#| label: function-logratio-sac-occ-scatterplot
#| message: false
#| warning: false


# Define a function to create scatter plots for each dataset ID
create.p6 <- function(dataset_name, data = jcocc_data_df) {
  
  # Logratio and quadrant table for the desired dataset
  data <- data %>% 
    filter(datasetID == dataset_name &
           !quadrant %in% c("Pos. Infinite", "Neg. Infinite", "No change"))
  
  # Number of unique grain sizes in the study area
  scaling_levels <- n_distinct(data$cellSide)
  
  # Plot limits
  limit_value <- data %>%
    select(logratioJCStat, logratioOcc) %>%
    mutate(across(everything(), ~ ifelse(is.finite(.), ., NA))) %>%
    summarise(max_abs = max(abs(c_across(everything())), na.rm = TRUE)) %>%
    pull(max_abs) %>% 
    round(., 2)
  
  # Plot
  p6 <- ggplot(data, aes(x = logratioOcc, y = logratioJCStat)) +
    geom_point(aes(size = factor(cellSide), color = quadrant), alpha = 0.5) +
    scale_size_manual(values = seq(2, 2 + 1.5 * (scaling_levels - 1), by = 1),
                      name = "Cell side (km)",
                      labels = paste0(unique(data$cellSide))) +
    scale_color_manual(values = quadrant_col, guide = "none") +
    geom_hline(yintercept = 0, color = "black") +
    geom_vline(xintercept = 0, color = "black") +
    geom_smooth(aes(x = logratioOcc, y = logratioJCExp), 
                method = "lm", color = "black", 
                linetype = "dashed", se = FALSE, fullrange = TRUE) +
    ylim(-(limit_value), limit_value) +
    xlim(-(limit_value), limit_value) +
    labs(
      x = "Log ratio of occupancy change",
      y = "Log ratio of JC statistic change"
    ) +
    theme_minimal() +
    theme(
      panel.grid = element_blank(),
      legend.title = element_text(size = 9),
      legend.text = element_text(size = 8),
      legend.key.size = unit(0.3, "cm"),
      legend.spacing = unit(0.3, "cm"),
      legend.position = c(1, 0.45),
      legend.justification = c(1, 1),
      axis.title.x = element_text(size = 11),
      axis.text.x = element_text(size = 9),
      axis.title.y = element_text(size = 11),
      axis.text.y = element_text(size = 9)
    )
  
  return(p6)
}
```

-   Scatterplot list

```{r}
#| label: list-logratio-sac-occ-scatterplot
#| message: false
#| warning: false

# Use map to apply the function to each dataset ID
p6_list <- purrr::map(datasetIDs, create.p6)
p6_list <- setNames(p6_list, datasetIDs)
```

-   Scatterplot grid arrangement

```{r}
#| label: arrangement-logratio-scatterplot
#| message: false
#| warning: false
#| include: false

# Grid arrangement
p6_plot <- grid.arrange(
  arrangeGrob(aos_labels[[1]], p6_list$Czechia,
              ncol = 1, heights = c(0.1, 3)),
  arrangeGrob(aos_labels[[2]], p6_list$Europe, 
              ncol = 1, heights = c(0.1, 3)),
  arrangeGrob(aos_labels[[3]], p6_list$`New York`,
              ncol = 1, heights = c(0.1, 3)),
  arrangeGrob(aos_labels[[4]], p6_list$Japan, 
              ncol = 1, heights = c(0.1, 3)),
  ncol = 2, nrow = 2, widths = c(1, 1), heights = c(1, 1)
)
```

-   Saving

```{r}
#| label: save-logratio-sac-occ-scatterplot
#| message: false
#| warning: false

ggsave(plot = p6_plot, dpi = 600, width = 5, height = 6,
       file.path(paths$figure_path,
                 "p6_scatterplot.png"))
```

### Barplots logratio SAC against logratio OCC

-   Function

```{r}
#| label: function-logratio-sac-occ-barplot
#| message: false
#| warning: false

# Function to create bar plots for each dataset ID
create.p7 <- function(dataset_name, data = quadrant_counts_df) {
  # Logratio and quadrant table for the desired dataset
  data <- data %>% 
    filter(datasetID == dataset_name)
  
  # Number of unique grain sizes in the study area
  scaling_levels <- n_distinct(data$cellSide)
  
  # Plot
  p7 <- ggplot(data, aes(x = quadrantGroup, y = percentageSp,
                         fill = quadrant)) +
    geom_bar(stat = "identity", position = "stack") +
    scale_fill_manual(values = quadrant_col) +
    labs(x = "Quadrant", y = "% species") +
    theme_minimal() +
    theme(
      panel.grid = element_blank(),
      legend.position = "right",
      legend.title = element_blank(),
      legend.text = element_text(size = 8),
      legend.key.size = unit(0.4, "cm"),
      axis.title.x = element_text(size = 10),
      axis.text.x = element_blank(),
      axis.title.y = element_text(size = 10),
      axis.text.y = element_text(size = 9),
      strip.background = element_rect(fill = "transparent"),
      strip.text = element_text(face = "plain", size = 9),
      panel.spacing = unit(0.5, "lines")
      ) +
    facet_wrap(~ cellSide, 
               ncol = scaling_levels, 
               labeller = labeller(cellSide = function(x) paste(x, "km")))
  
  # Extracting the legend. Then I'll use the one with more categories
  leg <- cowplot::get_legend(p7)
  
  # Remove legend from plots
  p7 <- p7 + theme(legend.position = "none")
  
  return(list(plot = p7, legend = leg))
  
}
```

-   Barplot and legends list

```{r}
#| label: logratio-sac-occ-barplot-list
#| message: false
#| warning: false

# Run the function
p7leg_list <- purrr::map(datasetIDs, create.p7)

# Extract the plots
p7_list <- map(p7leg_list, "plot")
# Name the elements of the plots
p7_list <- setNames(p7_list, datasetIDs)

# Extract the legends
leg7_list <- map(p7leg_list, "legend")
# Name the elements
leg7_list <- setNames(leg7_list, datasetIDs)

rm(p7leg_list)
```

-   Grid arrangement

```{r}
#| label: logratio-sac-occ-grid
#| message: false
#| warning: false

# Grid arrangement for the third set of plots (stacked barplots: occ_sac_change_plot_list_v3)
p7_plot <- grid.arrange(
  arrangeGrob(aos_labels[[1]], p7_list$Czechia,
              ncol = 1, heights = c(0.1, 3)),
  arrangeGrob(aos_labels[[2]], p7_list$Europe, 
              ncol = 1, heights = c(0.1, 3)),
  arrangeGrob(aos_labels[[3]], p7_list$`New York`,
              ncol = 1, heights = c(0.1, 3)),
  arrangeGrob(aos_labels[[4]], p7_list$Japan, 
              ncol = 1, heights = c(0.1, 3)),
  ncol = 2, nrow = 2, widths = c(1, 1), heights = c(1, 1)
    )

# Adding the legend
p7leg_plot <- grid.arrange(
  p7_plot, leg7_list$`New York`,
  ncol = 2, widths = c(4, 0.5)
)
```

-   Saving

```{r}
#| label: save-logratio-sac-occ-barplot
#| message: false
#| warning: false

ggsave(plot = p7leg_plot, dpi = 300, width = 8, height = 7,
       file.path(paths$figure_path,
                 "p7_barplot.png"))
```

### Changes across grain sizes per area of study (supplementary)

```{r}
#| label: quadrant-grain-plot
#| message: false
#| warning: false

ps3_plot <- ggplot(quadrant_counts_df, aes(x = cellSide,
                                           y = percentageSp,
                                           color = quadrant,
                                           group = quadrant)) +
  geom_line(linewidth = 0.75) +
  geom_point(size = 1.5) +
  scale_color_manual(values = quadrant_col) +
  labs(x = "% species", y = "grain size") +
  theme_minimal() +
  facet_wrap(~factor(datasetID, levels = c("Czechia", "Europe", "New York", "Japan")), scales = "free_x") +
  theme(panel.grid = element_blank(),
        axis.line = element_line(color = "black"))

plot(ps3_plot)
```

-   Saving

```{r}
#| label: save-quadrant-grain-plot
#| message: false
#| warning: false

ggsave(plot = ps3_plot, dpi = 300, width = 5, height = 6, 
       file.path(paths$figure_path, 
                 "ps3_lineplot.png"))
```
